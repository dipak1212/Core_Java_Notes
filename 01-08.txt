01-july

## The Methods to Prevent(Stop) a Thread from Execution:-
----------------------------------------------------------
We can prevent(stop) a Thread execution by using the following three methods.
1) yield();
2) join();
3) sleep();

1) yield():
---------
- yield() method causes “to pause current executing Thread for giving the
 chance of remaining waiting Threads of same priority”.
-  If all waiting Threads have the low priority or if there is no waiting
 Threads then the same Thread will be continued its execution.
- If several waiting Threads with same priority available then we can’t
  expect exact which Thread will get chance for execution.
- The Thread which is yielded when it get chance once again for execution 
  its depends on the Thread scheduler.
- public static native void yield();

ex.
package MultiThreading;
public class YeildExample {
public static void main(String[] args) {
	MyThreads thread = new MyThreads();
	thread.start();
	for (int i = 1; i <=5; i++) {
		System.out.println("Main Thread");
		//Thread.yield();
	}
}
}

class MyThreads extends Thread{
	public void run() {
		for (int i = 1; i <= 5; i++) {
			System.out.println("child Thread");
			Thread.yield();   //.......................line no 1 
		}
	}
}

Output:
Main Thread
Main Thread
Main Thread
Main Thread
Main Thread
child Thread
child Thread
child Thread
child Thread
child Thread


-IN the above program if we are comenting line no 1 then both threads will execute 
simultanously and we cant expect exact which thread complete first.
-If we are not commenting line 1 then child thread always call yeild() method because 
of that main thread will get chamce more number of times and the chance of 
completing main thread  first is high.

2)Join():
---------
- If a Thread wants to wait until completing some other Thread then we should go for
join() method.
ex.
-if t1 thread wants to wait until completing t2 then t1 has call t2.join().
-If t1 executes t2.join() then imidiately t1 will entered into waiting state until 
 t2 execution.
 -Once t2 complete its execution then t1 can continued its execution.

ex.
package MultiThreading;

class MyThread extends Thread {
	public void run() {
		for (int i = 1; i < 5; i++) {
			System.out.println("Sita Thread");
			try {
				Thread.sleep(10000);
			} catch (Exception e) {
			}
		}
	}
}

public class JoinExample {
	public static void main(String[] args) throws InterruptedException {
		MyThread mythread = new MyThread();
		mythread.start();
		mythread.join();    // line 1
		for (int i = 1; i < 5; i++) {
			System.out.println("Ram Thread");
		}

	}

}


-If we are commenting line 1 then both Threads will be executed simultaneously
 and we can’t expect exact execution order.
- If we are not commenting line 1 then main Thread will wait until completing child
Thread in this the output is seethe Thread 5 times followed by Rama Thread 5 times