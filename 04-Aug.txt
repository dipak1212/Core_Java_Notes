04-August
---------

2)Join():
---------
- If a Thread wants to wait until completing some other Thread then we should go for
join() method.
ex.
-if t1 thread wants to wait until completing t2 then t1 has call t2.join().
-If t1 executes t2.join() then imidiately t1 will entered into waiting state until 
 t2 execution.
 -Once t2 complete its execution then t1 can continued its execution.

ex.package MultiThreading;

class MyThread extends Thread {
	public void run() {
		for (int i = 0; i < 5; i++) {
			System.out.println("My Thread");
			try {
				Thread.sleep(10000);
			} catch (Exception e) {
			}
		}
	}
}

public class JoinExample {
	public static void main(String[] args) throws InterruptedException {
		MyThread mythread = new MyThread();
		mythread.start();
		mythread.join();  // line no  1		
		for (int i = 0; i < 5; i++) {
			System.out.println("Main Thread");
		}
	}
}



-If we are commenting line 1 then both Threads will be executed simultaneously
 and we can’t expect exact execution order.
- If we are not commenting line 1 then main Thread will wait until completing child
 Thread in this the output is My Thread 5 times followed by Main Thread 5 times


3)Sleep():-
-----------
-If a Thread don’t want to perform any operation for a particular amount of time 
 then we should go for sleep() method.
 
 ex.
 package MultiThreading;

public class SleepEx {
public static void main(String[] args)throws InterruptedException
{
System.out.println("M");
Thread.sleep(3000);
System.out.println("E");
Thread.sleep(3000);
System.out.println("G");
Thread.sleep(3000);
System.out.println("A");
}
}
