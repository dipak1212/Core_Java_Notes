10-Aug
------

#Deadlock->
-------------
-If 2 Threads are waiting for each other forever(without end) such type of
situation(infinite waiting) is called dead lock.
-There are no resolution techniques for dead lock but several prevention(avoidance)
techniques are possible.
-Synchronized keyword is the cause for deadlock hence whenever we are using
synchronized keyword we have to take special care.


##Daemon Threads->
------------------

-The Threads which are executing in the background are called daemon Threads. The
main objective of daemon Threads is to provide support for non daemon Threads.
for ex.
     Garbage collector
	
-We can check whether the Thread is daemon or not by using isDaemon() method.
public final boolean isDaemon();
- We can change daemon nature of a Thread by using setDaemon () method.
public final void setDaemon(boolean b);
-But we can change daemon nature before starting Thread only. That is after starting the
Thread if we are trying to change the daemon nature we will get R.E saying
IllegalThreadStateException.
-Main Thread is always non daemon and we can’t change its daemon nature because it’s
already started at the beginning only.
-Main Thread is always non daemon and for the remaining Threads daemon nature will
be inheriting from parent to child that is if the parent is daemon child is also daemon
and if the parent is non daemon then child is also non daemon.
-Whenever the last non daemon Thread terminates automatically all daemon Threads
will be terminated.

ex.
package MultiThreading;

class MyThread2 extends Thread
{
public void run()
{
for(int i=0;i<10;i++)
{
System.out.println("lazy thread");
try
{
Thread.sleep(2000);
}
catch (InterruptedException e)
{}
}
}
}

public class DaemonThread {

	public static void main(String[] args) {

		MyThread2 t=new MyThread2();
		t.setDaemon(true);
		t.start();
		System.out.println("end of main Thread");
		}
}


##deadlock vs Starvation->
-----------------------------
- A long waiting of a Thread which never ends is called deadlock.
- A long waiting of a Thread which ends at certain point is called starvation.
- A low priority Thread has to wait until completing all high priority Threads.
- This long waiting of Thread which ends at certain point is called starvation
	 
**How to kill a Thread in the middle of the line?
--------------------------------------------------
-We can call stop() method to stop a Thread in the middle then it will be
entered into dead state immediately.
public final void stop();
-stop() method has been deprecated and hence not recommended to use.


##suspend and resume methods->
------------------------------
- A Thread can suspend another Thread by using suspend() method then that Thread will
be paused temporarily.
- A Thread can resume a suspended Thread by using resume() method then suspended
Thread will continue its execution.
1) public final void suspend();
2) public final void resume();
- Both methods are deprecated and not recommended to use.

##RACE condition->
------------------
- Executing multiple Threads simultaneously and causing data inconsistency problems
is nothing but Race condition we can resolve race condition by using synchronized
keyword.